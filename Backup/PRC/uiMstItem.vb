'================================================== 
' Generated by DWRAD version 1.0.0.0
' Irhantoro E
' Trans7

' Created Date: 3/16/2008 4:19:05 PM
' 


Public Class uiMstItem
    Private Const mUiName As String = "Master Item"
    Private Const SHOW_SAVE_CONFIRMATION As Boolean = True

    Private Event FormBeforeOpenRow(ByRef id As Object)
    Private Event FormAfterOpenRow(ByRef id As Object)
    Private Event FormBeforeSave(ByRef id As Object)
    Private Event FormAfterSave(ByRef id As Object, ByVal result As FormSaveResult)
    Private Event FormBeforeNew()
    Private Event FormBeforeDelete(ByRef id As Object)
    Private Event FormAfterDelete(ByRef id As Object)

    Private FILTER_QUERY_MODE As Boolean
    Private DATA_ISLOCKED As Boolean

    Private objFormError As Windows.Forms.ErrorProvider = New Windows.Forms.ErrorProvider

    Private tbl_MstItemcategorygroup As DataTable = clsDataset.CreateTblMstItemcategorygroup()
    Private tbl_MstItemcategorygroup_Temp As DataTable = clsDataset.CreateTblMstItemcategorygroup()
    Private tbl_MstItemcategory As DataTable = clsDataset.CreateTblMstItemcategory()
    Private tbl_MstItem As DataTable = clsDataset.CreateTblMstItem()
    Private tbl_MstItem_all As DataTable = clsDataset.CreateTblMstItem()

#Region " Window Parameter "
    ' TODO: Buat variabel untuk menampung parameter window 

#End Region

#Region " Overrides "

    Public Overrides Function btnQuery_Click() As Boolean
        Me.PnlDfSearch.Visible = Not Me.PnlDfSearch.Visible
        If Me.PnlDfSearch.Visible Then
            FILTER_QUERY_MODE = True
            Me.tbtnQuery.CheckState = CheckState.Checked
        Else
            FILTER_QUERY_MODE = False
            Me.tbtnQuery.CheckState = CheckState.Unchecked
        End If
        Return MyBase.btnQuery_Click()
    End Function

    Public Overrides Function btnNew_Click() As Boolean
        Me.Cursor = Cursors.WaitCursor
        'If Me.ftabMain.SelectedIndex = 0 Or Me.ftabMain.SelectedIndex = 2 Then
        '    Me.ftabMain.SelectedIndex = 1
        'End If
        'MsgBox("Use this feature only to create NEW GROUP or NEW CATEGORY." & vbCrLf & _
        '        "To create NEW ITEM, just insert it on detil area after selecting Group and Category.", MsgBoxStyle.Information)
        MsgBox("To create NEW ITEM, just insert it on detil area after selecting Group and Category.", MsgBoxStyle.Information)

        Me.uiMstItem_NewData()
        Me.Cursor = Cursors.Arrow
        Return MyBase.btnNew_Click()
    End Function

    Public Overrides Function btnLoad_Click() As Boolean
        Me.Cursor = Cursors.WaitCursor
        Me.uiMstItem_Retrieve()
        Me.Cursor = Cursors.Arrow
        Return MyBase.btnLoad_Click()
    End Function

    Public Overrides Function btnSave_Click() As Boolean
        If Me.uiMstItem_FormError() Then
            Return True
        End If
        Me.Cursor = Cursors.WaitCursor
        Me.uiMstItem_Save()
        Me.Cursor = Cursors.Arrow
        Return MyBase.btnSave_Click()
    End Function


    Public Overrides Function btnPrint_Click() As Boolean
        Me.Cursor = Cursors.WaitCursor
        Me.uiMstItem_Print()
        Me.Cursor = Cursors.Arrow
        Return MyBase.btnPrint_Click()
    End Function

    Public Overrides Function btnDel_Click() As Boolean
        Me.Cursor = Cursors.WaitCursor
        Me.uiMstItem_Delete()
        Me.Cursor = Cursors.Arrow
        Return MyBase.btnDel_Click()
    End Function

    Public Overrides Function btnFirst_Click() As Boolean
        Me.Cursor = Cursors.WaitCursor
        Me.uiMstItem_First()
        Me.Cursor = Cursors.Arrow
        Return MyBase.btnFirst_Click()
    End Function

    Public Overrides Function btnPrev_Click() As Boolean
        Me.Cursor = Cursors.WaitCursor
        Me.uiMstItem_Prev()
        Me.Cursor = Cursors.Arrow
        Return MyBase.btnPrev_Click()
    End Function

    Public Overrides Function btnNext_Click() As Boolean
        Me.Cursor = Cursors.WaitCursor
        Me.uiMstItem_Next()
        Me.Cursor = Cursors.Arrow
        Return MyBase.btnNext_Click()
    End Function

    Public Overrides Function btnLast_Click() As Boolean
        Me.Cursor = Cursors.WaitCursor
        Me.uiMstItem_Last()
        Me.Cursor = Cursors.Arrow
        Return MyBase.btnLast_Click()
    End Function


#End Region

#Region " Layout & Init UI "

    Private Function FormatDgvMstItemCategoryGroup(ByRef objDgv As System.Windows.Forms.DataGridView) As Boolean
        ' Format DgvMstItemcategory Columns 
        Dim cGroup_id As System.Windows.Forms.DataGridViewTextBoxColumn = New System.Windows.Forms.DataGridViewTextBoxColumn
        Dim cGroup_name As System.Windows.Forms.DataGridViewTextBoxColumn = New System.Windows.Forms.DataGridViewTextBoxColumn

        cGroup_id.Name = "group_id"
        cGroup_id.HeaderText = "Group ID"
        cGroup_id.DataPropertyName = "group_id"
        cGroup_id.Width = 125
        cGroup_id.Visible = True
        cGroup_id.ReadOnly = False

        cGroup_name.Name = "group_name"
        cGroup_name.HeaderText = "Group Name"
        cGroup_name.DataPropertyName = "group_name"
        cGroup_name.Width = 250
        cGroup_name.Visible = True
        cGroup_name.ReadOnly = False

        objDgv.Columns.Clear()
        objDgv.Columns.AddRange(New System.Windows.Forms.DataGridViewColumn() _
          {cGroup_id, cGroup_name})

        ' DgvMstItemcategory Behaviours: 
        objDgv.AllowUserToAddRows = False
        objDgv.AllowUserToDeleteRows = False
        objDgv.AllowUserToResizeRows = False
        objDgv.AutoGenerateColumns = False
        objDgv.ReadOnly = True
        objDgv.SelectionMode = DataGridViewSelectionMode.FullRowSelect

    End Function

    Private Function FormatDgvMstItem(ByRef objDgv As System.Windows.Forms.DataGridView) As Boolean
        ' formating DgvMstItem
        Dim cItem_id As System.Windows.Forms.DataGridViewTextBoxColumn = New System.Windows.Forms.DataGridViewTextBoxColumn
        Dim cItem_name As System.Windows.Forms.DataGridViewTextBoxColumn = New System.Windows.Forms.DataGridViewTextBoxColumn
        Dim cItem_descr As System.Windows.Forms.DataGridViewTextBoxColumn = New System.Windows.Forms.DataGridViewTextBoxColumn
        Dim cCategory_id As System.Windows.Forms.DataGridViewTextBoxColumn = New System.Windows.Forms.DataGridViewTextBoxColumn
        Dim cIs_active As System.Windows.Forms.DataGridViewCheckBoxColumn = New System.Windows.Forms.DataGridViewCheckBoxColumn

        cItem_id.Name = "item_id"
        cItem_id.HeaderText = "Item ID"
        cItem_id.DataPropertyName = "item_id"
        cItem_id.Width = 125
        cItem_id.Visible = False
        cItem_id.ReadOnly = True

        cItem_name.Name = "item_name"
        cItem_name.HeaderText = "Item Name"
        cItem_name.DataPropertyName = "item_name"
        cItem_name.Width = 250
        cItem_name.Visible = True
        cItem_name.ReadOnly = False

        cItem_descr.Name = "item_descr"
        cItem_descr.HeaderText = "Item Description"
        cItem_descr.DataPropertyName = "item_descr"
        cItem_descr.Width = 350
        cItem_descr.Visible = True
        cItem_descr.ReadOnly = False

        cCategory_id.Name = "category_id"
        cCategory_id.HeaderText = "Category ID"
        cCategory_id.DataPropertyName = "category_id"
        cCategory_id.Width = 100
        cCategory_id.Visible = False
        cCategory_id.ReadOnly = False

        cIs_active.Name = "is_active"
        cIs_active.HeaderText = "Active"
        cIs_active.DataPropertyName = "is_active"
        cIs_active.Width = 60
        cIs_active.Visible = True
        cIs_active.ReadOnly = False

        objDgv.Columns.Clear()
        objDgv.AllowUserToAddRows = False
        objDgv.AllowUserToDeleteRows = False
        objDgv.AllowUserToResizeRows = False
        objDgv.AutoGenerateColumns = False
        objDgv.ReadOnly = False
        objDgv.Columns.AddRange(New System.Windows.Forms.DataGridViewColumn() _
        {cItem_id, cItem_name, cItem_descr, cCategory_id, cIs_active})


    End Function

    Private Function FormatDgvMstItem_all(ByRef objDgv As System.Windows.Forms.DataGridView) As Boolean
        ' formating DgvMstItem_all
        Dim cItem_id As System.Windows.Forms.DataGridViewTextBoxColumn = New System.Windows.Forms.DataGridViewTextBoxColumn
        Dim cItem_name As System.Windows.Forms.DataGridViewTextBoxColumn = New System.Windows.Forms.DataGridViewTextBoxColumn
        Dim cCategory_id As System.Windows.Forms.DataGridViewTextBoxColumn = New System.Windows.Forms.DataGridViewTextBoxColumn
        Dim cItem_line As System.Windows.Forms.DataGridViewTextBoxColumn = New System.Windows.Forms.DataGridViewTextBoxColumn
        Dim cIs_active As System.Windows.Forms.DataGridViewCheckBoxColumn = New System.Windows.Forms.DataGridViewCheckBoxColumn

        cItem_id.Name = "item_id"
        cItem_id.HeaderText = "Item ID"
        cItem_id.DataPropertyName = "item_id"
        cItem_id.Width = 50
        cItem_id.Visible = False
        cItem_id.ReadOnly = False

        cItem_name.Name = "item_name"
        cItem_name.HeaderText = "Item Name"
        cItem_name.DataPropertyName = "item_name"
        cItem_name.Width = 200
        cItem_name.Visible = True
        cItem_name.ReadOnly = False

        cCategory_id.Name = "category_id"
        cCategory_id.HeaderText = "Category ID"
        cCategory_id.DataPropertyName = "category_id"
        cCategory_id.Width = 100
        cCategory_id.Visible = True
        cCategory_id.ReadOnly = False

        cItem_line.Name = "item_line"
        cItem_line.HeaderText = "Item Line"
        cItem_line.DataPropertyName = "item_line"
        cItem_line.Width = 100
        cItem_line.Visible = True
        cItem_line.ReadOnly = False

        cIs_active.Name = "is_active"
        cIs_active.HeaderText = "Active"
        cIs_active.DataPropertyName = "is_active"
        cIs_active.Width = 60
        cIs_active.Visible = True
        cIs_active.ReadOnly = False



        objDgv.Columns.Clear()
        objDgv.AutoGenerateColumns = False
        objDgv.Columns.AddRange(New System.Windows.Forms.DataGridViewColumn() _
        {cItem_id, cItem_name, cCategory_id, cItem_line, cIs_active})

        objDgv.AllowUserToAddRows = False
        objDgv.AllowUserToDeleteRows = False
        objDgv.AllowUserToResizeRows = False
        objDgv.AutoGenerateColumns = False
        objDgv.ReadOnly = True
        objDgv.SelectionMode = DataGridViewSelectionMode.FullRowSelect

    End Function


    Private Function InitLayoutUI() As Boolean

        Me.ftabMain.Anchor = AnchorStyles.Bottom
        Me.ftabMain.Anchor += AnchorStyles.Top
        Me.ftabMain.Anchor += AnchorStyles.Right
        Me.ftabMain.Anchor += AnchorStyles.Left

        Me.ftabMain.TabPages.Item(1).BackColor = Color.Gainsboro
        Me.PnlDfSearch.Dock = DockStyle.Top
        Me.PnlDfSearch.Visible = False
        Me.PnlDfMain.Dock = DockStyle.Fill

        Me.PnlDfSearchItem.Dock = DockStyle.Top
        Me.PnlDfSearchItem.Visible = False
        Me.DgvMstItem.Dock = DockStyle.Fill
        Me.DgvMstItem_All.Dock = DockStyle.Fill

        Me.FormatDgvMstItemCategoryGroup(Me.DgvMstItemCategoryGroup)
        Me.FormatDgvMstItem(Me.DgvMstItem)
        Me.FormatDgvMstItem_all(Me.DgvMstItem_All)

    End Function

    Private Function BindingStop() As Boolean
        'stop binding
        Me.obj_Group_id.DataBindings.Clear()
        Me.obj_Group_name.DataBindings.Clear()

        'Me.obj_Category_id.DataBindings.Clear()
        'Me.cbo_Category_name.DataBindings.Clear()

        Return True
    End Function

    Private Function BindingStart() As Boolean
        'start binding
        Me.obj_Group_id.DataBindings.Add(New Binding("Text", Me.tbl_MstItemcategorygroup_Temp, "group_id"))
        Me.obj_Group_name.DataBindings.Add(New Binding("Text", Me.tbl_MstItemcategorygroup_Temp, "group_name"))

        'Me.obj_Category_id.DataBindings.Add(New Binding("Text", Me.tbl_MstItemcategory, "category_id"))
        'Me.cbo_Category_name.DataBindings.Add(New Binding("Text", Me.tbl_MstItemcategory, "category_name"))

        Return True
    End Function


#End Region

#Region " Dialoged Control "
#End Region


#Region " User Defined Function "

    Private Function uiMstItem_NewData() As Boolean
        'new data
        RaiseEvent FormBeforeNew()

        ' TODO: Set Default Value for tbl_MstItemcategory_Temp
        'Me.tbl_MstItemcategorygroup_Temp.Clear()

        ' TODO: Set Default Value for tbl_MstItem
        'Me.tbl_MstItem.Clear()
        'Me.tbl_MstItem = clsDataset.CreateTblMstItem()
        'Me.tbl_MstItem.Columns("category_id").DefaultValue = 0
        'Me.tbl_MstItem.Columns("item_line").DefaultValue = DBNull.Value
        'Me.tbl_MstItem.Columns("item_line").AutoIncrement = True
        'Me.tbl_MstItem.Columns("item_line").AutoIncrementSeed = 1
        'Me.tbl_MstItem.Columns("item_line").AutoIncrementStep = 1
        'Me.DgvMstItem.DataSource = Me.tbl_MstItem

        'Me.BindingContext(Me.tbl_MstItemcategorygroup_Temp).EndCurrentEdit()
        'Try
        '    Me.BindingContext(Me.tbl_MstItemcategorygroup_Temp).AddNew()
        'Catch ex As Exception
        '    MessageBox.Show(ex.Source)
        'End Try

    End Function

    Private Function uiMstItem_Retrieve() As Boolean
        'retrieve data
        Dim criteria As String = ""

        ' TODO: Parse Criteria using clsProc.RefParser()

        Me.tbl_MstItemcategorygroup.Clear()
        Try
            Me.DataFill(Me.tbl_MstItemcategorygroup, "pr_MstItemcategorygroup_Select", criteria)
            Me.tbl_MstItemcategorygroup.DefaultView.Sort = "group_id"
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try

        'Me.tbl_MstItemcategory.Clear()
        'Try
        '    Me.ComboFill(Me.cbo_Category_name, "category_id", "category_name", Me.tbl_MstItemcategory, "pr_MstItemcategory_Select", criteria)
        '    'Dim category_id As String = Me.tbl_MstItemcategory.Rows(0)("category_id").ToString
        'Catch ex As Exception
        '    MsgBox(ex.Message)
        'End Try

        Me.tbl_MstItem_all.Clear()
        Try
            Me.DataFill(Me.tbl_MstItem_all, "pr_MstItem_Select", criteria)
            Me.tbl_MstItem_all.DefaultView.Sort = "item_name"
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try

    End Function

    Private Function uiMstItem_Save() As Boolean
        'save data
        Dim tbl_MstItem_Changes As DataTable
        Dim success As Boolean
        Dim category_id As Object = New Object
        Dim i As Integer = 0
        Dim MasterDataState As System.Data.DataRowState
        Dim result As FormSaveResult

        Me.Cursor = Cursors.WaitCursor
        RaiseEvent FormBeforeSave(category_id)

        Me.BindingContext(Me.tbl_MstItemcategorygroup_Temp).EndCurrentEdit()

        Me.DgvMstItem.EndEdit()
        Me.BindingContext(Me.tbl_MstItem).EndCurrentEdit()
        tbl_MstItem_Changes = Me.tbl_MstItem.GetChanges()

        If tbl_MstItem_Changes IsNot Nothing Then
            category_id = Me.cbo_Category_name.SelectedValue.ToString

            If category_id = "" Then
                MsgBox("Please select category first..", MsgBoxStyle.Information, "Category not selected")
            Else
                Try
                    If tbl_MstItem_Changes IsNot Nothing Then
                        For i = 0 To Me.tbl_MstItem.Rows.Count - 1
                            If Me.tbl_MstItem.Rows(i).RowState = DataRowState.Added Then
                                Me.tbl_MstItem.Rows(i).Item("category_id") = category_id
                            End If
                        Next
                        success = Me.uiMstItem_SaveDetil(category_id, tbl_MstItem_Changes, MasterDataState)
                        If Not success Then Throw New Exception("Error: Save Detil Data at Me.uiMstItem_SaveDetil(tbl_MstItem_Changes)")
                        Me.tbl_MstItem.AcceptChanges()
                    End If

                    result = FormSaveResult.SaveSuccess
                    If SHOW_SAVE_CONFIRMATION Then
                        MessageBox.Show("Data Saved", mUiName, MessageBoxButtons.OK, MessageBoxIcon.Information)
                    End If

                Catch ex As Exception
                    result = FormSaveResult.SaveError
                    MessageBox.Show("Data Cannot Be Saved" & vbCrLf & ex.Message, mUiName, MessageBoxButtons.OK, MessageBoxIcon.Error)
                End Try
            End If
        Else
            result = FormSaveResult.Nochanges
            If SHOW_SAVE_CONFIRMATION Then
                MessageBox.Show("All changes has been saved", mUiName, MessageBoxButtons.OK, MessageBoxIcon.Information)
            End If
        End If

        RaiseEvent FormAfterSave(category_id, result)
        Me.Cursor = Cursors.Arrow

    End Function

    Private Function uiMstItem_SaveMaster(ByRef category_id As Object, ByVal objTbl As DataTable, ByVal MasterDataState As System.Data.DataRowState) As Boolean
        'Dim dbConn As OleDb.OleDbConnection = New OleDb.OleDbConnection(Me.DSN)
        'Dim dbCmdInsert As OleDb.OleDbCommand
        'Dim dbCmdUpdate As OleDb.OleDbCommand
        'Dim dbDA As OleDb.OleDbDataAdapter
        'Dim curpos As Integer

        '' Save data: master_Itemcategory
        'dbCmdInsert = New OleDb.OleDbCommand("pr_MstItemcategory_Insert", dbConn)
        'dbCmdInsert.CommandType = CommandType.StoredProcedure
        'dbCmdInsert.Parameters.Add(New System.Data.OleDb.OleDbParameter("@category_id", System.Data.OleDb.OleDbType.VarWChar, 30, "category_id"))
        'dbCmdInsert.Parameters.Add(New System.Data.OleDb.OleDbParameter("@category_name", System.Data.OleDb.OleDbType.VarWChar, 60, "category_name"))
        'dbCmdInsert.Parameters.Add(New System.Data.OleDb.OleDbParameter("@category_code", System.Data.OleDb.OleDbType.VarWChar, 4, "category_code"))
        'dbCmdInsert.Parameters.Add(New System.Data.OleDb.OleDbParameter("@category_spktype", System.Data.OleDb.OleDbType.VarWChar, 100, "category_spktype"))
        'dbCmdInsert.Parameters.Add(New System.Data.OleDb.OleDbParameter("@is_spk", System.Data.OleDb.OleDbType.Boolean, 1, "is_spk"))
        'dbCmdInsert.Parameters.Add(New System.Data.OleDb.OleDbParameter("@cat_id", System.Data.OleDb.OleDbType.Integer, 4, "cat_id"))


        'dbCmdUpdate = New OleDb.OleDbCommand("pr_MstItemcategory_Update", dbConn)
        'dbCmdUpdate.CommandType = CommandType.StoredProcedure
        'dbCmdUpdate.Parameters.Add(New System.Data.OleDb.OleDbParameter("@category_id", System.Data.OleDb.OleDbType.VarWChar, 30, "category_id"))
        'dbCmdUpdate.Parameters.Add(New System.Data.OleDb.OleDbParameter("@category_name", System.Data.OleDb.OleDbType.VarWChar, 60, "category_name"))
        'dbCmdUpdate.Parameters.Add(New System.Data.OleDb.OleDbParameter("@category_code", System.Data.OleDb.OleDbType.VarWChar, 4, "category_code"))
        'dbCmdUpdate.Parameters.Add(New System.Data.OleDb.OleDbParameter("@category_spktype", System.Data.OleDb.OleDbType.VarWChar, 100, "category_spktype"))
        'dbCmdUpdate.Parameters.Add(New System.Data.OleDb.OleDbParameter("@is_spk", System.Data.OleDb.OleDbType.Boolean, 1, "is_spk"))
        'dbCmdUpdate.Parameters.Add(New System.Data.OleDb.OleDbParameter("@cat_id", System.Data.OleDb.OleDbType.Integer, 4, "cat_id"))


        'dbDA = New OleDb.OleDbDataAdapter
        'dbDA.UpdateCommand = dbCmdUpdate
        'dbDA.InsertCommand = dbCmdInsert


        'dbDA = New OleDb.OleDbDataAdapter
        'dbDA.UpdateCommand = dbCmdUpdate
        'dbDA.InsertCommand = dbCmdInsert


        'Try
        '    dbConn.Open()
        '    dbDA.Update(objTbl)

        '    category_id = objTbl.Rows(0).Item("category_id")
        '    Me.tbl_MstItemcategorygroup_Temp.Clear()
        '    Me.tbl_MstItemcategorygroup_Temp.Merge(objTbl)

        'Catch ex As Data.OleDb.OleDbException
        '    MessageBox.Show(ex.Message, "OLE DB Error", MessageBoxButtons.OK, MessageBoxIcon.Error)
        '    Return False
        'Catch ex As Exception
        '    MessageBox.Show(ex.Message)
        '    Return False
        'Finally
        '    dbConn.Close()
        'End Try


        'If MasterDataState = DataRowState.Added Then
        '    Me.tbl_MstItemcategory.Merge(objTbl)
        'ElseIf MasterDataState = DataRowState.Modified Then
        '    curpos = Me.BindingContext(Me.tbl_MstItemcategory).Position
        '    Me.tbl_MstItemcategory.Rows.RemoveAt(curpos)
        '    Me.tbl_MstItemcategory.Merge(objTbl)
        'End If

        'Me.BindingContext(Me.tbl_MstItemcategory).Position = Me.BindingContext(Me.tbl_MstItemcategory).Count

        Return True
    End Function

    Private Function uiMstItem_SaveDetil(ByRef category_id As Object, ByVal objTbl As DataTable, ByVal MasterDataState As System.Data.DataRowState) As Boolean
        Dim dbConn As OleDb.OleDbConnection = New OleDb.OleDbConnection(Me.DSN)
        Dim dbCmdInsert As OleDb.OleDbCommand
        Dim dbCmdUpdate As OleDb.OleDbCommand
        Dim dbCmdDelete As OleDb.OleDbCommand
        Dim dbDA As OleDb.OleDbDataAdapter

        ' Save data: master_Item
        dbCmdInsert = New OleDb.OleDbCommand("pr_MstItem_Insert", dbConn)
        dbCmdInsert.CommandType = CommandType.StoredProcedure
        dbCmdInsert.Parameters.Add(New System.Data.OleDb.OleDbParameter("@item_id", System.Data.OleDb.OleDbType.VarWChar, 30, "item_id"))
        dbCmdInsert.Parameters.Add(New System.Data.OleDb.OleDbParameter("@item_name", System.Data.OleDb.OleDbType.VarWChar, 200, "item_name"))
        dbCmdInsert.Parameters.Add(New System.Data.OleDb.OleDbParameter("@item_descr", System.Data.OleDb.OleDbType.VarWChar, 510, "item_descr"))
        dbCmdInsert.Parameters.Add(New System.Data.OleDb.OleDbParameter("@category_id", System.Data.OleDb.OleDbType.VarWChar, 30))
        dbCmdInsert.Parameters("@category_id").Value = category_id
        dbCmdInsert.Parameters.Add(New System.Data.OleDb.OleDbParameter("@is_active", System.Data.OleDb.OleDbType.Boolean, 1, "is_active"))


        dbCmdUpdate = New OleDb.OleDbCommand("pr_MstItem_Update", dbConn)
        dbCmdUpdate.CommandType = CommandType.StoredProcedure
        dbCmdUpdate.Parameters.Add(New System.Data.OleDb.OleDbParameter("@item_id", System.Data.OleDb.OleDbType.VarWChar, 30, "item_id"))
        dbCmdUpdate.Parameters.Add(New System.Data.OleDb.OleDbParameter("@item_name", System.Data.OleDb.OleDbType.VarWChar, 200, "item_name"))
        dbCmdUpdate.Parameters.Add(New System.Data.OleDb.OleDbParameter("@item_descr", System.Data.OleDb.OleDbType.VarWChar, 510, "item_descr"))
        dbCmdUpdate.Parameters.Add(New System.Data.OleDb.OleDbParameter("@category_id", System.Data.OleDb.OleDbType.VarWChar, 30))
        dbCmdUpdate.Parameters("@category_id").Value = category_id
        dbCmdUpdate.Parameters.Add(New System.Data.OleDb.OleDbParameter("@is_active", System.Data.OleDb.OleDbType.Boolean, 1, "is_active"))


        dbCmdDelete = New OleDb.OleDbCommand("pr_MstItem_Delete", dbConn)
        dbCmdDelete.CommandType = CommandType.StoredProcedure
        dbCmdDelete.Parameters.Add(New System.Data.OleDb.OleDbParameter("@item_id", System.Data.OleDb.OleDbType.VarWChar, 30, "item_id"))
        dbCmdDelete.Parameters.Add(New System.Data.OleDb.OleDbParameter("@item_name", System.Data.OleDb.OleDbType.VarWChar, 200, "item_name"))
        dbCmdDelete.Parameters.Add(New System.Data.OleDb.OleDbParameter("@item_descr", System.Data.OleDb.OleDbType.VarWChar, 510, "item_descr"))
        dbCmdDelete.Parameters.Add(New System.Data.OleDb.OleDbParameter("@category_id", System.Data.OleDb.OleDbType.VarWChar, 30))
        dbCmdDelete.Parameters("@category_id").Value = category_id
        dbCmdDelete.Parameters.Add(New System.Data.OleDb.OleDbParameter("@is_active", System.Data.OleDb.OleDbType.Boolean, 1, "is_active"))


        dbDA = New OleDb.OleDbDataAdapter
        dbDA.UpdateCommand = dbCmdUpdate
        dbDA.InsertCommand = dbCmdInsert
        dbDA.DeleteCommand = dbCmdDelete


        Try
            dbConn.Open()
            dbDA.Update(objTbl)

        Catch ex As Data.OleDb.OleDbException
            MessageBox.Show(ex.Message, "OLE DB Error", MessageBoxButtons.OK, MessageBoxIcon.Error)
            Return False
        Catch ex As Exception
            MessageBox.Show(ex.Message)
            Return False
        Finally
            dbConn.Close()
        End Try

        Return True
    End Function

    Private Function uiMstItem_Print() As Boolean
        'print data
    End Function

    Private Function uiMstItem_Delete() As Boolean
        'user cannot delete data directly---------------------'
    End Function

    Private Function uiMstItem_DeleteRow(ByVal rowIndex As Integer) As Boolean
        'user cannot delete data directly---------------------'
    End Function

    Private Function uiMstItem_OpenRow(ByVal rowIndex As Integer) As Boolean
        Dim dbConn As OleDb.OleDbConnection = New OleDb.OleDbConnection(Me.DSN)
        Dim group_id As String

        group_id = Me.DgvMstItemCategoryGroup.Rows(rowIndex).Cells("group_id").Value

        Me.Cursor = Cursors.WaitCursor
        RaiseEvent FormBeforeOpenRow(group_id)

        Try
            dbConn.Open()
            Me.uiMstItem_OpenRowGroup(group_id, dbConn)
            Me.uiMstItem_OpenRowCategory(group_id, dbConn)

        Catch ex As Exception
            MessageBox.Show(ex.Message, mUiName & ": uiMstItem_OpenRow()", MessageBoxButtons.OK, MessageBoxIcon.Error)
        Finally
            dbConn.Close()
        End Try

        RaiseEvent FormAfterOpenRow(group_id)
        Me.Cursor = Cursors.Arrow

        Return True

    End Function

    Private Function uiMstItem_OpenRowGroup(ByVal group_id As String, ByVal dbConn As OleDb.OleDbConnection) As Boolean
        Dim dbCmd As OleDb.OleDbCommand
        Dim dbDA As OleDb.OleDbDataAdapter

        dbCmd = New OleDb.OleDbCommand("pr_MstItemcategorygroup_Select", dbConn)
        dbCmd.Parameters.Add("@Criteria", Data.OleDb.OleDbType.VarChar)
        dbCmd.Parameters("@Criteria").Value = String.Format("group_id='{0}'", group_id)
        dbCmd.CommandType = CommandType.StoredProcedure
        dbDA = New OleDb.OleDbDataAdapter(dbCmd)

        Me.tbl_MstItemcategorygroup_Temp.Clear()

        Try
            Me.BindingStop()
            dbDA.Fill(Me.tbl_MstItemcategorygroup_Temp)
            Me.BindingStart()
        Catch ex As Exception
            Throw New Exception(mUiName & ": uiMstItem_OpenRowGroup()" & vbCrLf & ex.Message)
        End Try

    End Function

    Private Function uiMstItem_OpenRowCategory(ByVal group_id As String, ByVal dbConn As OleDb.OleDbConnection) As Boolean
        'Dim criteria As String = "group_id = '" & group_id & "'"
        Dim criteria As String = "master_itemcategory.group_id= '" & group_id & "'"

        Me.tbl_MstItemcategory.Clear()
        Try
            Me.ComboFill(Me.cbo_Category_name, "category_id", "category_name", Me.tbl_MstItemcategory, "pr_MstItemcategory_Select", criteria)
            Me.tbl_MstItemcategory.DefaultView.Sort = "category_name"
        Catch ex As Exception
            Throw New Exception(mUiName & ": uiMstItem_OpenRowCategory()" & vbCrLf & ex.Message)
        End Try

    End Function

    Private Function uiMstItem_OpenRowItem(ByVal category_id As String, ByVal dbConn As OleDb.OleDbConnection) As Boolean
        Dim dbCmd As OleDb.OleDbCommand
        Dim dbDA As OleDb.OleDbDataAdapter

        dbCmd = New OleDb.OleDbCommand("pr_MstItem_Select", dbConn)
        dbCmd.Parameters.Add("@Criteria", Data.OleDb.OleDbType.VarChar)
        dbCmd.Parameters("@Criteria").Value = String.Format("master_item.category_id='{0}'", category_id)
        dbCmd.CommandType = CommandType.StoredProcedure
        dbDA = New OleDb.OleDbDataAdapter(dbCmd)

        Me.tbl_MstItem.Clear()

        Try
            'Me.BindingStop()
            dbDA.Fill(Me.tbl_MstItem)
            Me.tbl_MstItem.DefaultView.Sort = "item_name"
            'Me.BindingStart()
        Catch ex As Exception
            Throw New Exception(mUiName & ": uiMstItem_OpenRowItem()" & vbCrLf & ex.Message)
        End Try

    End Function

    Private Function uiMstItem_First() As Boolean
        'goto first record found
        Dim move As Boolean
        Dim Message As String = "Data has been changed. " & vbCrLf & "Save data changes before move to first record ?"
        Dim iTab As Integer = Me.ftabMain.SelectedIndex

        If iTab = 1 Then
            If Me.DATA_ISLOCKED Then
                move = True
            Else
                move = Me.uiMstItem_ConfirmSaveBeforeMove(Message)
            End If
        Else
            move = True
        End If

        If move Then
            Me.DgvMstItemCategoryGroup.CurrentCell = Me.DgvMstItemCategoryGroup(1, 0)
            Me.uiMstItem_RefreshPosition()
        End If
    End Function

    Private Function uiMstItem_Prev() As Boolean
        'goto previous record found
        Dim move As Boolean
        Dim Message As String = "Data has been changed. " & vbCrLf & "Save data changes before move to previous record ?"
        Dim iTab As Integer = Me.ftabMain.SelectedIndex

        If iTab = 1 Then
            If Me.DATA_ISLOCKED Then
                move = True
            Else
                move = Me.uiMstItem_ConfirmSaveBeforeMove(Message)
            End If
        Else
            move = True
        End If

        If move Then
            If Me.DgvMstItemCategoryGroup.CurrentCell.RowIndex > 0 Then
                Me.DgvMstItemCategoryGroup.CurrentCell = Me.DgvMstItemCategoryGroup(1, DgvMstItemCategoryGroup.CurrentCell.RowIndex - 1)
                Me.uiMstItem_RefreshPosition()
            End If
        End If
    End Function

    Private Function uiMstItem_Next() As Boolean
        'goto next record found
        Dim move As Boolean
        Dim Message As String = "Data has been changed. " & vbCrLf & "Save data changes before move to next record ?"
        Dim iTab As Integer = Me.ftabMain.SelectedIndex

        If iTab = 1 Then
            If Me.DATA_ISLOCKED Then
                move = True
            Else
                move = Me.uiMstItem_ConfirmSaveBeforeMove(Message)
            End If
        Else
            move = True
        End If

        If move Then
            If Me.DgvMstItemCategoryGroup.CurrentCell.RowIndex < Me.DgvMstItemCategoryGroup.Rows.Count - 1 Then
                Me.DgvMstItemCategoryGroup.CurrentCell = Me.DgvMstItemCategoryGroup(1, DgvMstItemCategoryGroup.CurrentCell.RowIndex + 1)
                Me.uiMstItem_RefreshPosition()
            End If
        End If
    End Function

    Private Function uiMstItem_Last() As Boolean
        'goto last record found
        Dim move As Boolean
        Dim Message As String = "Data has been changed. " & vbCrLf & "Save data changes before move to next record ?"
        Dim iTab As Integer = Me.ftabMain.SelectedIndex

        If iTab = 1 Then
            If Me.DATA_ISLOCKED Then
                move = True
            Else
                move = Me.uiMstItem_ConfirmSaveBeforeMove(Message)
            End If
        Else
            move = True
        End If

        If move Then
            Me.DgvMstItemCategoryGroup.CurrentCell = Me.DgvMstItemCategoryGroup(1, Me.DgvMstItemCategoryGroup.Rows.Count - 1)
            Me.uiMstItem_RefreshPosition()
        End If
    End Function

    Private Function uiMstItem_RefreshPosition() As Boolean
        'refresh position
        Dim iTab As Integer = Me.ftabMain.SelectedIndex
        If iTab = 1 Then uiMstItem_OpenRow(Me.DgvMstItemCategoryGroup.CurrentRow.Index)
    End Function

    Private Function uiMstItem_ConfirmSaveBeforeMove(ByVal Message As String) As Boolean
        'confirm saving data changes before move
        Dim tbl_MstItemcategory_Temp_Changes As DataTable
        Dim tbl_MstItem_Changes As DataTable
        Dim res As System.Windows.Forms.DialogResult
        Dim success As Boolean
        Dim i As Integer = 0
        Dim MasterDataState As System.Data.DataRowState
        Dim category_id As Object = New Object
        Dim move As Boolean = False
        Dim result As FormSaveResult


        If Me.DgvMstItemCategoryGroup.CurrentCell IsNot Nothing Then

            Me.BindingContext(Me.tbl_MstItemcategorygroup_Temp).EndCurrentEdit()
            tbl_MstItemcategory_Temp_Changes = Me.tbl_MstItemcategorygroup_Temp.GetChanges()

            Me.DgvMstItem.EndEdit()
            Me.BindingContext(Me.tbl_MstItem).EndCurrentEdit()
            tbl_MstItem_Changes = Me.tbl_MstItem.GetChanges()

            If tbl_MstItemcategory_Temp_Changes IsNot Nothing Or tbl_MstItem_Changes IsNot Nothing Then

                res = MessageBox.Show(Message, mUiName, MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question)
                Select Case res
                    Case DialogResult.Yes

                        RaiseEvent FormBeforeSave(category_id)

                        Try

                            If tbl_MstItemcategory_Temp_Changes IsNot Nothing Then
                                success = Me.uiMstItem_SaveMaster(category_id, tbl_MstItemcategory_Temp_Changes, MasterDataState)
                                If Not success Then Throw New Exception("Cannot Save Master Data")
                                Me.tbl_MstItemcategorygroup_Temp.AcceptChanges()
                            End If

                            If tbl_MstItem_Changes IsNot Nothing Then
                                For i = 0 To Me.tbl_MstItem.Rows.Count - 1
                                    If Me.tbl_MstItem.Rows(i).RowState = DataRowState.Added Then
                                        Me.tbl_MstItem.Rows(i).Item("category_id") = category_id
                                    End If
                                Next
                                success = Me.uiMstItem_SaveDetil(category_id, tbl_MstItem_Changes, MasterDataState)
                                If Not success Then Throw New Exception("Cannot Save Detil Data")
                                Me.tbl_MstItem.AcceptChanges()
                            End If

                            result = FormSaveResult.SaveSuccess
                            If SHOW_SAVE_CONFIRMATION Then
                                MessageBox.Show("Data Saved", mUiName, MessageBoxButtons.OK, MessageBoxIcon.Information)
                            End If

                        Catch ex As Exception
                            result = FormSaveResult.SaveError
                            MessageBox.Show(ex.Message & vbCrLf & "Data Cannot Be Saved", mUiName, MessageBoxButtons.OK, MessageBoxIcon.Error)
                        End Try

                        RaiseEvent FormAfterSave(category_id, result)

                    Case DialogResult.No
                        move = True
                    Case DialogResult.Cancel
                        move = False
                End Select
            Else
                move = True
            End If

        End If

        Return move

    End Function

    Private Function uiMstItem_FormError() As Boolean
        Try
            ' TODO: Cek Error disini
            ' objFormError.SetError()

            ' Throw New Exception("Error")
        Catch ex As Exception
            MessageBox.Show(ex.Message, mUiName, MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            Return True
        End Try
        Return False
    End Function

#End Region



    Private Sub uiMstItem_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
        Dim objParameters As Collection = New Collection


        If (Me.Browser IsNot Nothing And MyBase.Name = "MainControl") Or (Me.Browser Is Nothing And Application.ProductName <> "TransBrowser") Then
            'TODO: - Extract Parameter
            '      - Assign parameter
            If Me.Browser IsNot Nothing Then
                objParameters = Me.GetParameterCollection(Me.Parameter)
            End If

            Me.InitLayoutUI()

            Me.DgvMstItemCategoryGroup.DataSource = Me.tbl_MstItemcategorygroup
            Me.DgvMstItem_All.DataSource = Me.tbl_MstItem_all
            Me.DgvMstItem.DataSource = Me.tbl_MstItem

            Me.BindingStop()
            Me.BindingStart()

            Me.uiMstItem_NewData()

            Me.tbtnSave.Enabled = False
            Me.tbtnDel.Enabled = False
            Me.tbtnLoad.Enabled = True
            Me.tbtnQuery.Enabled = True
        End If 

    End Sub

    Private Sub ftabMain_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles ftabMain.SelectedIndexChanged

        Select Case ftabMain.SelectedIndex
            Case 0
                Me.tbtnSave.Enabled = False
                Me.tbtnDel.Enabled = False
                Me.tbtnLoad.Enabled = True
                Me.tbtnQuery.Enabled = True
                Me.tbtnFirst.Enabled = True
                Me.tbtnLast.Enabled = True
                Me.tbtnNext.Enabled = True
                Me.tbtnPrev.Enabled = True
                Me.ftabMain.TabPages.Item(0).BackColor = Color.White
                Me.ftabMain.TabPages.Item(1).BackColor = Color.Gainsboro
                Me.ftabMain.TabPages.Item(2).BackColor = Color.Gainsboro

            Case 1
                Me.tbtnSave.Enabled = True
                Me.tbtnDel.Enabled = True
                Me.tbtnLoad.Enabled = False
                Me.tbtnQuery.Enabled = False
                Me.tbtnFirst.Enabled = True
                Me.tbtnLast.Enabled = True
                Me.tbtnNext.Enabled = True
                Me.tbtnPrev.Enabled = True
                Me.ftabMain.TabPages.Item(0).BackColor = Color.Gainsboro
                Me.ftabMain.TabPages.Item(1).BackColor = Color.White
                Me.ftabMain.TabPages.Item(2).BackColor = Color.Gainsboro

                If Me.DgvMstItemCategoryGroup.CurrentRow IsNot Nothing Then
                    Me.uiMstItem_OpenRow(Me.DgvMstItemCategoryGroup.CurrentRow.Index)
                Else
                    Me.uiMstItem_NewData()
                End If

            Case 2
                Me.tbtnSave.Enabled = False
                Me.tbtnDel.Enabled = False
                Me.tbtnLoad.Enabled = False
                Me.tbtnQuery.Enabled = False
                Me.tbtnFirst.Enabled = False
                Me.tbtnLast.Enabled = False
                Me.tbtnNext.Enabled = False
                Me.tbtnPrev.Enabled = False
                Me.tbtnPrintPreview.Enabled = False
                Me.tbtnRefresh.Enabled = False
                Me.ftabMain.TabPages.Item(0).BackColor = Color.Gainsboro
                Me.ftabMain.TabPages.Item(1).BackColor = Color.Gainsboro
                Me.ftabMain.TabPages.Item(2).BackColor = Color.White

        End Select

    End Sub

    Private Sub DgvMstItemCategoryGroup_CellDoubleClick(ByVal sender As System.Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles DgvMstItemCategoryGroup.CellDoubleClick
        If e.ColumnIndex < 0 Or e.RowIndex < 0 Then
            Exit Sub
        End If
        If Me.DgvMstItemCategoryGroup.CurrentRow IsNot Nothing Then
            Me.ftabMain.SelectedIndex = 1
        End If
    End Sub

    Private Sub cbo_Category_name_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cbo_Category_name.SelectedIndexChanged
        Dim dbConn As OleDb.OleDbConnection = New OleDb.OleDbConnection(Me.DSN)
        Dim category_id As String

        If Me.cbo_Category_name.SelectedIndex > 0 Then
            category_id = Me.cbo_Category_name.SelectedValue
            Me.obj_Category_id.Text = category_id
            Me.uiMstItem_OpenRowItem(category_id, dbConn)
        Else
            Me.obj_Category_id.Text = ""
            Me.tbl_MstItem.Clear()
        End If



    End Sub

    Private Sub btnAddItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnAddItem.Click
        Dim criteria As String
        Dim criteria_2 As String = ""
        Dim retRow() As DataRow

        Dim txtSearchCriteria As String = ""
        Dim txtCondition As String = ""
        Dim item_name As String = ""
        Dim item_desc As String = ""
        Dim newRow As DataRow
        Dim colIndex
        Dim colName As String

        criteria = txtCondition
        If Me.cbo_Category_name.SelectedValue = "0" Then
            MsgBox(" Please Select the Category .. ")
            Exit Sub
        Else
            Dim dlg As dlgSelectItem2 = New dlgSelectItem2(Me.DSN, criteria)
            retRow = dlg.OpenDialog(Me)
            item_name = dlg.txtItemName.Text
            item_desc = dlg.txtItemDesc.Text
            If item_name <> "" Then
                newRow = Me.tbl_MstItem.NewRow
                For colIndex = 0 To Me.tbl_MstItem.Columns.Count - 1
                    colName = Me.tbl_MstItem.Columns(colIndex).ColumnName
                    Select Case colName
                        Case "item_name"
                            newRow(colName) = item_name
                        Case "item_descr"
                            newRow(colName) = item_desc
                    End Select
                Next
                Me.tbl_MstItem.Rows.Add(newRow)
            End If
        End If
    End Sub
End Class
